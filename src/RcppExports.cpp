// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// SGPCA_cpp
arma::vec SGPCA_cpp(const arma::mat& X, const arma::ivec& group_label, double tau_reg, double eta_reg, int max_iter, double tol, const arma::vec& init_v);
RcppExport SEXP _SGPCA_SGPCA_cpp(SEXP XSEXP, SEXP group_labelSEXP, SEXP tau_regSEXP, SEXP eta_regSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP init_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type group_label(group_labelSEXP);
    Rcpp::traits::input_parameter< double >::type tau_reg(tau_regSEXP);
    Rcpp::traits::input_parameter< double >::type eta_reg(eta_regSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_v(init_vSEXP);
    rcpp_result_gen = Rcpp::wrap(SGPCA_cpp(X, group_label, tau_reg, eta_reg, max_iter, tol, init_v));
    return rcpp_result_gen;
END_RCPP
}
// SGPCA_rs_cpp
Rcpp::List SGPCA_rs_cpp(const arma::mat& X, const arma::ivec& group_label, int B, double rho, const arma::vec& tau_range, const arma::vec& eta_range, int max_iter, double tol, std::string mode, const arma::vec& init_v);
RcppExport SEXP _SGPCA_SGPCA_rs_cpp(SEXP XSEXP, SEXP group_labelSEXP, SEXP BSEXP, SEXP rhoSEXP, SEXP tau_rangeSEXP, SEXP eta_rangeSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP modeSEXP, SEXP init_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type group_label(group_labelSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau_range(tau_rangeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_range(eta_rangeSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< std::string >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_v(init_vSEXP);
    rcpp_result_gen = Rcpp::wrap(SGPCA_rs_cpp(X, group_label, B, rho, tau_range, eta_range, max_iter, tol, mode, init_v));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SGPCA_SGPCA_cpp", (DL_FUNC) &_SGPCA_SGPCA_cpp, 7},
    {"_SGPCA_SGPCA_rs_cpp", (DL_FUNC) &_SGPCA_SGPCA_rs_cpp, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_SGPCA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
